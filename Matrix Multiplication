%%cuda
#include<stdio.h>
#define N 6
__global__ void matrixMul(int*a,int*b,int*c){
    int row = blockIdx.y*blockDim.y+threadIdx.y;
    int col = blockIdx.x*blockDim.x+threadIdx.x;

    if (row<N&&col<N){
        int sum = 0;
        for(int k=0;k<N;++k){
            sum+=a[row*N+k]*b[k*N+col];
        }
        c[row*N+col]=sum;
    }
}
int main(){
    int a[N+N],b[N*N],c[N*N];
    int*d_a,*d_b,*d_c;

    cudaMalloc((void**)&d_a,N*N*sizeof(int));
    cudaMalloc((void**)&d_b,N*N*sizeof(int));
    cudaMalloc((void**)&d_c,N*N*sizeof(int));

    for(int i=0;i<N*N;++i){
        a[i]=i;
        b[i]=2*i;
    }
    cudaMemcpy(d_a, a, N * N * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, N * N * sizeof(int), cudaMemcpyHostToDevice);

    dim3 gridDim(3, 3, 3);
    dim3 blockDim(5, 5, 1);

    matrixMul<<<gridDim, blockDim>>>(d_a, d_b, d_c);

    cudaMemcpy(c, d_c, N * N * sizeof(int), cudaMemcpyDeviceToHost);

    for (int i = 0; i < N; ++i) {
for (int j = 0; j < N; ++j) {
printf("%d\t", c[i * N + j]);
}
printf("\n");
}

cudaFree(d_a);

cudaFree(d_b);
cudaFree(d_c);
//This frees the memory allocated on the GPU.
return 0;
}
