%%cuda
#include <stdio.h>
#include <curand_kernel.h>

#define NUM_BLOCKS 256
#define BLOCK_SIZE 256
#define NUM_SAMPLES (NUM_BLOCKS * BLOCK_SIZE)

__global__ void monteCarloPi(float *estimation, int seed) {
    int tid = blockIdx.x * blockDim.x + threadIdx.x;
    int num_inside_circle = 0;
    curandState state;
    curand_init(seed, tid, 0, &state);

    // Generate random points and count those within the unit circle
    for (unsigned int i = 0; i < NUM_SAMPLES; ++i) {
        float x = curand_uniform(&state);
        float y = curand_uniform(&state);
        if (x * x + y * y <= 1.0f)
            num_inside_circle++;
    }
    estimation[tid] = 4.0f * num_inside_circle / NUM_SAMPLES;
}

int main() {
    float *d_estimation;
    float *h_estimation = (float *)malloc(sizeof(float) * NUM_BLOCKS * BLOCK_SIZE);

    cudaMalloc(&d_estimation, sizeof(float) * NUM_BLOCKS * BLOCK_SIZE);
    monteCarloPi<<<NUM_BLOCKS, BLOCK_SIZE>>>(d_estimation, time(NULL));
    cudaMemcpy(h_estimation, d_estimation, sizeof(float) * NUM_BLOCKS * BLOCK_SIZE, cudaMemcpyDeviceToHost);

    float pi_estimation = 0.0f;
    for (int i = 0; i < NUM_BLOCKS * BLOCK_SIZE; ++i) {
        pi_estimation += h_estimation[i];
    }
    pi_estimation /= (NUM_BLOCKS * BLOCK_SIZE);

    printf("Estimated value of pi: %f\n", pi_estimation);

    // Cleanup
    cudaFree(d_estimation);
    free(h_estimation);

    return 0;
}
