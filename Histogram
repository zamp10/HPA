%%cuda
#include <stdio.h>

#define NUM_BINS 256
#define SIZE 1000

__global__ void computeHistogram(const unsigned char *data, int size, int *histogram) {
    int tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid < size) {
        atomicAdd(&histogram[data[tid]], 1);
    }
}

int main() {
    unsigned char *h_data;
    int *h_histogram;
    unsigned char *d_data;
    int *d_histogram;

    h_data = (unsigned char *)malloc(SIZE * sizeof(unsigned char));
    h_histogram = (int *)calloc(NUM_BINS, sizeof(int));

    for (int i = 0; i < SIZE; ++i) {
        h_data[i] = rand() % NUM_BINS;
    }

    cudaMalloc((void **)&d_data, SIZE * sizeof(unsigned char));
    cudaMalloc((void **)&d_histogram, NUM_BINS * sizeof(int));

    cudaMemcpy(d_data, h_data, SIZE * sizeof(unsigned char), cudaMemcpyHostToDevice);
    cudaMemset(d_histogram, 0, NUM_BINS * sizeof(int));

    int blockSize = 256;
    int numBlocks = (SIZE + blockSize - 1) / blockSize;

    computeHistogram<<<numBlocks, blockSize>>>(d_data, SIZE, d_histogram);

    cudaMemcpy(h_histogram, d_histogram, NUM_BINS * sizeof(int), cudaMemcpyDeviceToHost);

    printf("Histogram:\n");
    for (int i = 0; i < NUM_BINS; ++i) {
        printf("%d: %d\n", i, h_histogram[i]);
    }

    free(h_data);
    free(h_histogram);
    cudaFree(d_data);
    cudaFree(d_histogram);

    return 0;
}
