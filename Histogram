%%cuda

#include <stdio.h>

#define NUM_BINS 256

__global__ void computeHistogram(int* input, int* histogram, int size) {
    int tid = blockIdx.x * blockDim.x + threadIdx.x;

    if (tid < size) {
        atomicAdd(&histogram[input[tid]], 1);
    }
}

int main() {
    int size = 10000; // Example size of input data
    int input[size];
    int histogram[NUM_BINS] = {0};

    // Initialize input data
    for (int i = 0; i < size; i++) {
        input[i] = rand() % NUM_BINS; // Random data for simplicity
    }

    int *d_input, *d_histogram;
    cudaMalloc((void**)&d_input, size * sizeof(int));
    cudaMalloc((void**)&d_histogram, NUM_BINS * sizeof(int));

    cudaMemcpy(d_input, input, size * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_histogram, histogram, NUM_BINS * sizeof(int), cudaMemcpyHostToDevice);

    int threadsPerBlock = 256;
    int blocksPerGrid = (size + threadsPerBlock - 1) / threadsPerBlock;

    computeHistogram<<<blocksPerGrid, threadsPerBlock>>>(d_input, d_histogram, size);

    cudaMemcpy(histogram, d_histogram, NUM_BINS * sizeof(int), cudaMemcpyDeviceToHost);

    // Print histogram
    printf("Histogram:\n");
    for (int i = 0; i < NUM_BINS; i++) {
        printf("%d: %d\n", i, histogram[i]);
    }

    cudaFree(d_input);
    cudaFree(d_histogram);

    return 0;
}

