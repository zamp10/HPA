%%cuda

#include <stdio.h>
#define N 10

__device__ int isSafe(int board[N][N], int row, int col) {
    for (int i = 0; i < col; i++)
        if (board[row][i])
            return 0;

    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return 0;

    for (int i = row, j = col; j >= 0 && i < N; i++, j--)
        if (board[i][j])
            return 0;

    return 1;
}

__device__ int solveNQueensUtil(int board[N][N], int col) {
    if (col == N)
        return 1;

    int res = 0;

    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col)) {
            board[i][col] = 1;
            res += solveNQueensUtil(board, col + 1);
            board[i][col] = 0;
        }
    }

    return res;
}

__global__ void solveNQueens(int *count) {
    int board[N][N] = {0};
    *count = solveNQueensUtil(board, 0);
}

int main() {
    int *d_count;
    cudaMalloc((void **)&d_count, sizeof(int));
    solveNQueens<<<1, 1>>>(d_count);
    int h_count;
    cudaMemcpy(&h_count, d_count, sizeof(int), cudaMemcpyDeviceToHost);
    printf("Number of solutions for N-Queens: %d\n", h_count);
    cudaFree(d_count);
    return 0;
}
