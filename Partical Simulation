%%cuda
#include <stdio.h>

#define N 1000 // 1000 particles
#define DT 0.001
#define BLOCK_SIZE 256

// Kernel to compute external forces
__global__ void computeForceField(float *positions, float *externalForces) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < N) {
        // Example force field: constant force in the z-direction
        externalForces[3 * idx] = 0.0; // x-component
        externalForces[3 * idx + 1] = 0.0; // y-component
        externalForces[3 * idx + 2] = 10; // z-component (constant force in the negative z-direction)
    }
}

int main() {
    float *h_positions, *h_externalForces;
    float *d_positions, *d_externalForces;

    // Allocate memory on host
    h_positions = (float*)malloc(N * 3 * sizeof(float));
    h_externalForces = (float*)malloc(N * 3 * sizeof(float));

    // Initialize particle positions
    for (int i = 0; i < N; i++) {
        h_positions[3 * i] = 0.123456 + 0.001 * i; // x-coordinate
        h_positions[3 * i + 1] = 0.234567 + 0.001 * i; // y-coordinate
        h_positions[3 * i + 2] = 0.3456789 + 0.001 * i; // z-coordinate
    }

    // Allocate memory on device
    cudaMalloc(&d_positions, N * 3 * sizeof(float));
    cudaMalloc(&d_externalForces, N * 3 * sizeof(float));

    // Copy data from host to device
    cudaMemcpy(d_positions, h_positions, N * 3 * sizeof(float), cudaMemcpyHostToDevice);

    // Launch kernel to compute external forces
    computeForceField<<<BLOCK_SIZE, BLOCK_SIZE>>>(d_positions, d_externalForces);

    // Copy data from device to host
    cudaMemcpy(h_externalForces, d_externalForces, N * 3 * sizeof(float), cudaMemcpyDeviceToHost);

    // Print particle positions
    for (int i = 0; i < N; i++) {
        printf("Particle %d: (%f, %f, %f)\n", i, h_positions[3 * i], h_positions[3 * i + 1], h_positions[3 * i + 2]);
    }

    // Free memory
    free(h_positions);
    free(h_externalForces);
    cudaFree(d_positions);
    cudaFree(d_externalForces);

    return 0;
}
